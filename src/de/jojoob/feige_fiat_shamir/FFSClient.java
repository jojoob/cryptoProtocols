package de.jojoob.feige_fiat_shamir;

import de.jojoob.clientserver.Client;
import de.jojoob.clientserver.InputProcessor;

import java.io.IOException;
import java.math.BigInteger;
import java.security.InvalidParameterException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

/**
 * Feige-Fiat-Shamir Client
 */
public class FFSClient {

	/**
	 * Bit length of n
	 */

	public static int l = 4096;
	/**
	 * Rounds of Feige-Fiat-Shamir protocol within one interactive communication.
	 */
	public static int rounds = 100;

	private static Client client;
	private static int state = 0;
	private static final int RECEIVE_B = 0;
	private static final int WAIT = 99;
	private static final int READY = 100;

	private static SecureRandom rnd = new SecureRandom();

	/**
	 * public modulus
	 * n = p * q
	 */
	public static BigInteger n = new BigInteger("454000216043172537257412785885387218236562822184920529428914623376154139547676074967672335160254428261451508111613591012676078526771532555933218131656227260600475923751060223960173350725174108738090083416620607505566640049332429935449835174298125237664345840775334612328690930762671178146585373173134292215875290076820133371745509275998112177429570857252541585406304131678995851944534349357607598528274192782701603145163835390120304368869380208427620741205233477453606169429489543773586671773407220451191112338589883511192455552177222879894945071043773364588898473743959976477327601386675805634762462911116813288796392830630674037866111679976868093423478624103502916140402400334265958661246324243829635746738109377258798550150298127834498907852879585016468637449920063007492233336396053190753598442788209446510529022182789428702653983578159229258955666207924698222424835967743584186117911266628865087131985065693278725225174794337098123308720445879614728156983787013385510233273876033948914056349071041318448306424559387278642754144029329810713344589068849227189688577663417127866499418274860198825227643683632236927496842295850609199873271215590655855158972073212784517983687585032597618647918227148737178248839727154400314077100987");

	/**
	 * public key
	 * v = s^2 mod n
	 */
	public static BigInteger v = new BigInteger("54520624243336813965556222292238342823785457546565616774698470999054841181618259215262837248317829035048811284241871706782350800131760914128240343997605031791386515120339468986219931672026133326264725182038722148063424476413080489554623862839778649453608041744109014591196278396927375982314423009273525719280376305876699277366450401500146704193726766824047951846313095790744506590033457254048619333984752113764035429299659295407493487995796424109064040482070807655203607835979664579428280765274700060851648832983959792359865714455613424812633014534315325472483836011058053527161381885552624917639537347382072289573354939498216933593173177795300128092392715368475875503307219049223877948339003766681537264268838873437037549818597472545195159790353107728431841398230448696224176651363049102187124364830374352695669687570063931374682875472664843365042873692844471810818341867633066739349895182065602158271495933328107107056291193203542639587291553388450140221109956887775124076198678899418501272877414070304860007678478663072073496331483564811257392301586689150571217756402990780778491409946176472024043400044378783332131663990600748896676858753605695675847863391379050297848012737140597730096864644040219151617089486708462676844163666");

	/**
	 * private key
	 */
	private static BigInteger s = new BigInteger("149691250629160180114487824664246462804311596311691989421626646351204159546676457367816461662357905930395602940231951738972596886393062386381379312319945595216326001207680019646233263920787811200332337065990014374212333433583964651050867546683347705395245031518991203038040758588617362956811678305389589901562258630482482299854891789156632888284061113259755406071482748130774920926953839019980037942626429929964374612272102921665584121507619286083470498983735466017065544177709171677815291608760081765617922552287601806329222368849038624976658918000421870085371124404555572769830150387583357654998427883140148677037424108118781170949943875035786627618337765323239040164956947410421997041717489673883956220619997221329088072120944432978451234468811946757719227652481086525582069776368957260284557471443451518623180170899963858303161501478674548289231610536889893053470326726976764375250088108196536145561206406872629696763790233639327399733195359893029228901912878941778867327484492772466060792123021390256902451145781172702904191546350730190342532587664586872999524750069984654865410579934646688143020418883804041582201128134066819556405944191634222921733136802908825115181334702447322109524661265124762290584528340748854907630769293");

	private static List<BigInteger> rList = new ArrayList<BigInteger>(rounds);
	private static List<BigInteger> xList = new ArrayList<BigInteger>(rounds);
	private static List<BigInteger> yList = new ArrayList<BigInteger>(rounds);
	private static List<Boolean> bList = new ArrayList<Boolean>(rounds);

	static long startTime;
	static long endTime;

	public static void main(String[] args) throws IOException {

//		key params hardcoded
//		generateKeyParams();

		startTime = System.currentTimeMillis();
		System.out.println("startTime: " + startTime);

		// generate random numbers (r) and calculate x
		for (int i = 0; i < rounds; i++) {
			// choose r
			BigInteger r;
			do {
				r = new BigInteger(l , rnd);
			} while (r.compareTo(n) != -1 || r.mod(n).compareTo(BigInteger.ZERO) == 0); // r < n && gcd(r,n) = 1
			rList.add(r);

			// calculate x
			BigInteger x;
			x = r.modPow(BigInteger.valueOf(2), n);
			xList.add(x);
		}

		client = new Client("localhost", 31337);
		client.continuousRead(new ClientInputProcessor());

		for (int i = 0; i < rounds; i++) {
			client.writeLine(xList.get(i).toString());
		}

	}

	private static class ClientInputProcessor implements InputProcessor {
		@Override
		public void input(String input) {
			switch (state) {
				case RECEIVE_B:
					System.out.println("input: " + input);
					for (int i = 0; i < rounds; i++) {
						BigInteger y;
						if (input.charAt(i) == '0') {
							y = rList.get(i);
						} else if (input.charAt(i) == '1') {
							y = rList.get(i).multiply(s).mod(n);
						} else {
							throw new InvalidParameterException();
						}
						yList.add(y);
						try {
							client.writeLine(y.toString());
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					state = WAIT;
					break;
				case WAIT:
					System.out.println(input);
					endTime = System.currentTimeMillis();
					System.out.println("startTime: " + endTime);
					System.out.println("overallTime" + (endTime - startTime));
					state = READY;
					break;
				default:
					break;
			}
			if (state == READY) {
				try {
					client.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	private static void generateKeyParams() {
//		n = p * q
		n = BigInteger.probablePrime(l / 2, rnd).multiply(BigInteger.probablePrime(l / 2, rnd));
		System.out.println("n = " + n);

//		choose s
		do {
			s = new BigInteger(l , rnd);
		} while (s.compareTo(n) != -1 || s.mod(n).compareTo(BigInteger.ZERO) == 0); // s < n && gcd(s,n) = 1
		System.out.println("s = " + s);

//		 v = s^2 mod n
		 v = s.modPow(BigInteger.valueOf(2), n);
		 System.out.println("v = " + v);
	}

}
